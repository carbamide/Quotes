// Text of project Quotes written on 5/18/13 at 5:06 PM// Beginning of text file Constantsconstant kQuotePrintViewDefSym := 'print;constant kVersionStr := "1.0";constant kCopyrightStr :=	"©2013 Jukaela Enterprises.\nAll rights reserved.";// End of text file Constants// Beginning of file QuotePrintViewDef.t_v200_0 :=    {     printNextPageScript:       func()       begin       	nil;       end,     title: "Print Quote",     symbol: kQuotePrintViewDefSym,     margins: {left: 60, top: 60, right: 60, bottom: 60},     _proto: @200 /* protoPrintFormat */    };_v200_0_v218_0 :=    {text: "Static Text",     viewBounds: {left: 4, top: 8, right: 180, bottom: 32},     viewSetupFormScript:       func()       begin       	inherited:?viewSetupFormScript();       	self.text := kAppName && DateNTime ( Time() );       end,     _proto: @218 /* protoStaticText */    };AddStepForm(_v200_0, _v200_0_v218_0);author :=    {     path:       // Path in the soup entry              'author,     viewBounds: {left: -4, top: 32, right: -4, bottom: 57},     text: ""     ,     label:       // Label for this newtLabelInputLine              "Author",     entryFont:       // The font frame for the Author: system font, 10, bold.              // Used to be:       /*       {       	family: 'espy,       	size: 10,       	face: kFaceBold       }       */              // But ROM_fontSystem10Bold requires less memory.              ROM_fontSystem10Bold,     viewJustify: 48,     _proto: @422 /* newtLabelInputLine */    };AddStepForm(_v200_0, author);source :=    {     path:       // Path in the soup entry              'source,     viewBounds: {left: -4, top: 57, right: -4, bottom: 82},     text: ""     ,     label:       // Label for this newtLabelInputLine              "Source",     entryFont:       // The font frame for the Source: system font, 10, italic.              {       	family: 'espy,       	size: 10,       	face: kFaceItalic       },     viewJustify: 48,     _proto: @422 /* newtLabelInputLine */    };AddStepForm(_v200_0, source);text :=    {     path:       // Path in the soup entry              'quote,     viewBounds: {left: 4, top: 88, right: 0, bottom: 496},     text: "",     label:       // Label for this newtLabelInputLine              "Quote",     entryFont:       // The font frame for the Author: system font, 10, plain.              // Used to be:       /*       {       	family: 'espy,       	size: 10,       	face: kFaceNormal       }       */              // But ROM_fontSystem10 requires less memory.              ROM_fontSystem10,     viewJustify: 48,     viewLineSpacing:       // I set the viewLineSpacing to fit the font I chose.              15,     _proto: @422 /* newtLabelInputLine */    };AddStepForm(_v200_0, text);constant |layout_QuotePrintViewDef.t| := _v200_0;// End of file QuotePrintViewDef.t// Beginning of file protoCheckAllButton// Before Script forPP: Ill-placed Blank protoCheckAllButtonprotoCheckAllButton :=    {viewBounds: {left: 7, top: 0, right: 33, bottom: 13},     buttonClickScript:       func()       	if newtAppBase.currentLayout = 'overView then       		begin       			if layout.checkAllPrimed then       				layout:UnCheckAll()       			else       				layout:CheckAll();       			layout.checkAllPrimed := NOT layout.checkAllPrimed;       		end;,     icon:       MakePixFamily(           GetResourceFromFile({filename:                 "MacintoshHD:Documents:Newton Source:Quotes:protoCheckAllButton Icon"                 , resource: 132}),           nil,           [            {rsrcSpec:             GetResourceFromFile({filename:                   "MacintoshHD:Documents:Newton Source:Quotes:protoCheckAllButton Icon"                   , resource: 132}),             bitDepth: 1},            {rsrcSpec:             GetResourceFromFile({filename: ":`\u0011001000A900C4", resource: })             ,             bitDepth: 2},            {rsrcSpec:             GetResourceFromFile({filename: ":`\u0011001000A900C4", resource: })             ,             bitDepth: 4},            {rsrcSpec:             GetResourceFromFile({filename: ":`\u0011001000A900C4", resource: })             ,             bitDepth: 8}]);,     _proto: @198 /* protoPictureButton */    };constant |layout_protoCheckAllButton| := protoCheckAllButton;// End of file protoCheckAllButton// Beginning of file simple.default.view// Before Script forPP: Ill-placed Blank simple.defaultsimple.default :=    {viewBounds: {left: 0, top: 0, right: 0, bottom: 0},     viewFlags: 1,     viewFormat: 0,     viewJustify: 240,     protection:       // Simply public. Cf Programmer's Guide.              'public,     currentEntry: nil,     name:       // Name for this data view.              "Quote",     symbol:       // This view is the default one. (I don't have any other one anyway).              'default,     type:       // The kind for this dataview.              'editor,     fieldOrder:       // Orders in which fields are processed when the tab key is pressed.              [0,1,2],     viewClass: 74 /* clView */    };Author :=    {     path:       // Path in the soup entry              'author,     viewBounds: {left: -5, top: 0, right: -5, bottom: 25},     text: "",     label:       // Label for this newtLabelInputLine              "Author",     entryFont:       // The font frame for the Author: system font, 10, bold.              // Used to be:       /*       {       	family: 'espy,       	size: 10,       	face: kFaceBold       }       */              // But ROM_fontSystem10Bold requires less memory.              ROM_fontSystem10Bold,     viewJustify: 48,     _proto: @422 /* newtLabelInputLine */    };AddStepForm(simple.default, Author);Source :=    {     path:       // Path in the soup entry              'source,     viewBounds: {left: -5, top: 25, right: -5, bottom: 50},     text: ""     ,     label:       // Label for this newtLabelInputLine              "Source",     entryFont:       // The font frame for the Source: system font, 10, italic.              {       	family: 'espy,       	size: 10,       	face: kFaceItalic       },     viewJustify: 48,     _proto: @422 /* newtLabelInputLine */    };AddStepForm(simple.default, Source);Text :=    {     path:       // Path in the soup entry              'quote,     viewBounds: {left: -5, top: 60, right: -8, bottom: 432},     text: ""     ,     label:       // Label for this newtLabelInputLine              "Quote",     entryFont:       // The font frame for the Author: system font, 10, plain.              // Used to be:       /*       {       	family: 'espy,       	size: 10,       	face: kFaceNormal       }       */              // But ROM_fontSystem10 requires less memory.              ROM_fontSystem10,     viewJustify: 48,     viewLineSpacing:       // I set the viewLineSpacing to fit the font I chose.              15,     _proto: @422 /* newtLabelInputLine */    };AddStepForm(simple.default, Text);constant |layout_simple.default.view| := simple.default;// End of file simple.default.view// Beginning of file protoAboutBox// Before Script forPP: Ill-placed Blank protoAboutBoxprotoAboutBox :=    {viewBounds: {left: 0, top: 0, right: 200, bottom: 180},     viewDrawScript:       func()       begin       	local localBox := :LocalBox();       	local text;       	local bounds;       	       	local titleFont := {family: 'newYork, face: kFaceBold, size: 18};       	local versionFont := {family: 'geneva, face: kFaceNormal, size: 9};       	local creditFont := {family: 'newYork, face: kFaceNormal, size: 12};       	local textFont := {family: 'espy, face: kFaceNormal, size: 10};       	local reminderFont := {family: 'espy, face: kFaceBold, size: 10};       	       	// app title       	bounds := SetBounds(40, 5, localBox.right, localBox.bottom);       	TextBox(appName, {font: titleFont, justification: 'left}, bounds);       	       	// app version       	bounds := SetBounds(42, bounds.top + FontHeight(titleFont),       		localBox.right, localBox.bottom);       	TextBox(versionString, {font: versionFont, justification: 'left},       		bounds);       	       	// copyright info       	bounds := SetBounds(5, 45, localBox.right, localBox.bottom);       	TextBox(copyrightString, {font: textFont, justification: 'left},       		bounds);       	       	// contact info       	bounds := SetBounds(5, bounds.top + (FontHeight(textFont) * 2) + 5,       		localBox.right, localBox.bottom);       	TextBox(contactString, {font: textFont, justification: 'left},       		bounds);       	       	// notice       	bounds := SetBounds(5, bounds.top + (FontHeight(textFont) * 2) + 5,       		localBox.right - 5, localBox.bottom);       	TextBox(noticeString, {font: textFont, justification: 'left},       		bounds);       end,     viewJustify: 80,     viewEffect: 7314465,     appIcon: nil,     appName: "Text",     creditString: "Text",     versionString: "Text",     copyrightString: "Text",     contactString: "Text",     noticeString: "Text",     viewSetupDoneScript:       func()       begin       	appIconView.icon := self.appIcon;       end,     _proto: @179 /* protoFloater */    };appIconView :=    {icon: nil,     viewBounds: {left: 5, top: 5, right: 37, bottom: 37},     viewFlags: 1,     viewFormat: nil,     viewClass: 76 /* clPictureView */    };AddStepForm(protoAboutBox, appIconView);StepDeclare(protoAboutBox, appIconView, 'appIconView);protoAboutBox_v166_0 := {_proto: @166 /* protoCloseBox */};AddStepForm(protoAboutBox, protoAboutBox_v166_0);constant |layout_protoAboutBox| := protoAboutBox;// End of file protoAboutBox// Beginning of file aboutBox.t// Before Script forPP: Ill-placed Blank aboutBoxaboutBox :=    {versionString: "version 1.0",     copyrightString:       "\u00A9\u 2013 Jukaela Enterprises.\nAll rights reserved.\n",     contactString: "email: support@jukaela.com\nurl: http://www.jukaela.com/\n"     ,     noticeString: "This program comes with ABSOLUTELY NO WARRANTY.\n",     appName: "Quotes",     appIcon:       MakePixFamily(           GetResourceFromFile({filename:                 "MacintoshHD:Documents:Newton Source:Quotes:icon (hilited).rsrc"                 , resource: 1000}),           GetResourceFromFile({filename: ":`\u0011001000A900C4", resource: }),           [            {rsrcSpec:             GetResourceFromFile({filename:                   "MacintoshHD:Documents:Newton Source:Quotes:icon (hilited).rsrc"                   , resource: 1000}),             bitDepth: 1},            {rsrcSpec:             GetResourceFromFile({filename:                   "MacintoshHD:Documents:Newton Source:Quotes:icon (hilited).rsrc"                   , resource: 29876}),             bitDepth: 2},            {rsrcSpec:             GetResourceFromFile({filename:                   "MacintoshHD:Documents:Newton Source:Quotes:icon.rsrc",                   resource: 1000}),             bitDepth: 4},            {rsrcSpec:             GetResourceFromFile({filename:                   "MacintoshHD:Documents:Newton Source:Quotes:icon.rsrc",                   resource: 29876}),             bitDepth: 8}]);,     viewBounds: {left: -4, top: -4, right: 164, bottom: 164},     _proto: protoAboutBox    };constant |layout_aboutBox.t| := aboutBox;// End of file aboutBox.t// Beginning of file Application// Before Script forPP: Ill-placed Blank _v398_0_v398_0 :=    {     appSymbol:       // Symbol for this application. Required by NewtApp              kAppSymbol,     title:       // Title for the application. I simply use the application name.              kAppName,     appObject:       // Singular and plural for my objects              ["Quote", "Quotes"],     appAll:       // Text for all objects              "All Quotes",     allSoups:       // Definition of all the soups I have. I only have one here.              {       	mySoup: {       		_proto: newtSoup,       		soupName: "Quotes:Jukaela",       		soupQuery:       		{       			type: 'index,       			indexPath: '_uniqueID,       		},       		defaultDataType: '|Simple@Quotes:Jukaela|,       		soupIndices: [       			{       				structure: 'slot,       				path: 'index,       				type: 'int,       			}, {       				structure: 'slot,       				path: 'labels,       				type: 'tags,       			}, {       				structure: 'slot,       				path: 'quote,       				type: 'string,       			},       		],       	},       },     allLayouts:       // Definition of all layouts.       // Maybe one day, i'll move them out in two separate files.              {       	default:       	{       		_proto: newtLayout,       		viewBounds:       		{       			left: 0,       			top: 21,       			right: 0,       			bottom: -22,       		},       		viewJustify: 240,       		mastersoupSlot: 'mySoup,       		statusBarSlot: 'status,       		stepChildren:       		[       			{       				_proto: @406,        		    	viewSetupFormScript: func()       		    	begin       					viewChildren := entryViewDefs;       					inherited:?viewSetupFormScript();       				end,       				viewBounds:       				{       					left: 0,       					top: 0,       					right: 0,       					bottom: 0,       				},       				viewJustify: 240,       				viewChildren: [],       			}       		],       		name: "Editing",       		// Buttons are added by the status bar.       		menuLeftButtons:       		[       			{       				_proto: protoRecToggle, // A button       			},       			{       				_proto: protoKeyboardButton, // kbd button       			},       			{       				_proto: newtNewStationeryButton, // New Button       			},       		],       	},       	overview:       	{       		_proto: newtRolloverLayout,       		viewBounds:       		{       			left: 0,       			top: 21,       			right: 0,       			bottom: -22,       		},       		viewJustify: 240,       		mastersoupSlot: 'mySoup,       		centerTarget: TRUE,       		showStoreName: TRUE,       		name: "Overview",       		statusBarSlot: 'status,       		// Buttons are added by the status bar.       		menuRightButtons:       		[       			{       				_proto: GetLayout("protoCheckAllButton"),       				// newtCheckAllButton is only defined on NOS 2.1       			},       		],       		menuLeftButtons:       		[       			{       				_proto: newtNewStationeryButton, // New Button       			},       		],       		// From Checkbook-8/Overview.t DTS sample:       		CheckAll:       		func()       		begin       			local curse := dataCursor:Clone();       			curse:Reset();       			hilitedIndex := nil;       			selected := MapCursor(curse, func(e) MakeEntryAlias(e));       			AddUndoSend(layout, 'UnCheckAll, []);       			layout:DoRetarget();       		end,       		       		UncheckAll:       		func()       		begin       			hilitedIndex := nil;       			selected := nil;       			layout:DoRetarget();       		end,       	}       },     viewBounds: {left: 0, top: 0, right: 240, bottom: 320},     superSymbol:       // Symbol to tie application with its stationery              kAppSymbol,     overviewTargetClass:       // Symbol of the overview class              '|Overview@Quotes:Jukaela|,     viewFormat: 83953617,     viewFlags: 5,     autoPutAwayEnabled: true,     dateFindSlot:       // A path expression into a soup entry that contains a date for use in find              'timestamp,     allDataDefs:       // All the data defs for this application.              // Simple data def:       {       |Simple@Quotes:Jukaela|:       	{       		_proto: newtStationery,       		superSymbol: kAppSymbol,		// Application symbol       		version: 1,       		metadata: NIL,       		MakeNewEntry: func()       		begin       			local result := {};       			result.timestamp := Time();       				// I only fill the timestamp slot.       			return result;       		end,       		StringExtract: func(entry, nLines)       		begin       				// Used for overview       			// 13 Jan 01, KH: now omits "--" and ":" if author and/or source is empty       			local overviewStr;       			if entry.quote = nil then return "-empty-";       			if entry.author = nil and entry.source = nil then return entry.quote;       			if entry.author <> nil then overviewStr := entry.author;       			if entry.author <> nil and entry.source <> nil then       				overviewStr := overviewStr && "Ñ";       			if entry.source <> nil then overviewStr := overviewStr && entry.source;       			overviewStr := overviewStr & ":\n" & entry.quote;       			return overviewStr;       		end,       		TextScript: func(item, target)       		begin       				// Used for speech, e-mail, etc.       			// 27 Dec 00, KH: changed "Ñ" to "--" for compatibility with non-Newton systems       			// 13 Jan 01, KH: now omits "--" and ":" if author and/or source is empty       			local overviewStr;       			if target.quote = nil then return "-empty-";       			if target.author = nil and target.source = nil then return target.quote;       			if target.author <> nil then overviewStr := target.author;       			if target.author <> nil and target.source <> nil then       				overviewStr := overviewStr && "Ñ";       			if target.source <> nil then overviewStr := overviewStr && target.source;       			overviewStr := overviewStr & ":\n" & target.quote;       			return overviewStr;       		end,       		symbol: '|Simple@Quotes:Jukaela|,	// Symbol for this data def.       		name: "Quote",								// Name of this data def.       		description: "Quote",       	},              // Advanced data def       // [Doesn't work]       /*       |Advanced@Quotes:Jukaela|:       	{       		_proto: newtStationery,       		superSymbol: '|Quotes:Jukaela|,		// Application symbol       		version: 1,       		metadata: NIL,       		MakeNewEntry: func()       		begin       			local result := {};       			result.timestamp := Time();       				// I only fill the timestamp slot.       			return result;       		end,       		StringExtract: func(a,b)       		begin       				// Used for overview       			if a.quote = nil then return "-empty-";       			return a.author && "Ñ" && a.source & ":\n" & a.quote;       		end,       		TextScript: func(a,b)       		begin       				// Used for speech, e-mail, etc.       			return a.author && "Ñ" && a.source & ":\n" & a.quote;       		end,       		symbol: '|Advanced@Quotes:Jukaela|,	// Symbol for this data def.       		name: "Advanced Quote",						// Name of this data def.       		description: "Advanced Quote",       	}       */       },     allViewDefs:       // Defines the view defs for this application.              {       	|Simple@Quotes:Jukaela|:       	{       		default: GetLayout("simple.default.view"),       		printFormat: GetLayout ( "QuotePrintViewDef.t" ),       		routeFormat:       		{       			_proto: @490,       				// protoRoutingFormat with       				// symbol: 'targetFrameFormat       			setupSlip: func(a,b)       			begin       				// This space for rent.       				inherited:?setupSlip(a,b);       			end,       		},       	},       	                     /*       	|Advanced@Quotes:Jukaela|:       	{       		default: GetLayout("advanced.default.view"),       		routeFormat:       		{       			_proto: @490,       				// protoRoutingFormat with       				// symbol: 'targetFrameFormat       			setupSlip: func(a,b)       			begin       				inherited:?setupSlip(a,b);       			end,       		},       	},       */       	|Overview@Quotes:Jukaela|:       	{       		printFormat: GetLayout ( "QuotePrintViewDef.t" ),       		routeFormat:       		{       			_proto:protoRoutingFormat,       			symbol: 'routeFormat,       			title: "Selected Quotes",       		}       	},       },     viewJustify: 80,     declareSelf:       // I am the base.              'base,     ReorientToScreen: ROM_DefRotateFunc,     aboutView:       // Template used for the about slip, use GetLayout here       GetLayout("aboutBox.t"),     _proto: @398 /* newtApplication */    };status :=    {     menuLeftButtons:       // Button on the left: [i] button              [       	{       		_proto: newtInfoButton,       		DoInfoHelp: nil,	// No help.       	},       ],     menuRightButtons:       // Buttons on the right: action & filing.              [       	{       		_proto: newtActionButton,       	},       	{       		_proto: newtFilingButton,       	}       ],     viewSetupFormScript:       func()       begin       	// Hack to add the buttons from the layout.       	       	// Get current layout.       	local cLayout := allLayouts.(currentLayout);       	       	// I erase the previous version of the menuLeft array by the proto one       	// (the one just defined here).       	// It's cloned so that I can modify it.       	self.menuLeftButtons :=       		clone(self._proto.menuLeftButtons);       	       	// If the layout has a menuLeftArray, I add its content to       	// the proto menuLeftArray.       	       	if hasslot(cLayout, 'menuLeftButtons ) then       	begin       		// Add the buttons.       		menuLeftButtons :=       			ArrayMunger(clone(cLayout.menuLeftButtons),0,0,       				menuLeftButtons,0,-1);       	end else removeslot(self,'menuLeftButtons);	// Otherwise remove the copy.       	       	// Idem for the right buttons.       	// Clone the proto version and erase previous version if any.       	self.menuRightButtons :=       		clone(self._proto.menuRightButtons);       	       	// Add the layout right buttons if any.       	if hasslot(cLayout, 'menuRightButtons ) then       	begin       		menuRightButtons :=       			ArrayMunger(clone(cLayout.menuRightButtons),0,0,       				menuRightButtons,0,-1);       	end else removeslot(self,'menuRightButtons); // Otherwise remove the copy.       	       	// be sure to call inherited:?ViewSetupFormScript()       	inherited:?ViewSetupFormScript();       end,     _proto: @401 /* newtStatusBar */    };AddStepForm(_v398_0, status);bar := {_proto: @162 /* newtClockFolderTab */};AddStepForm(_v398_0, bar);constant |layout_Application| := _v398_0;// End of file Application// Beginning of text file Install & Remove.fInstallScript := func(partFrame) partFrame.removeframe := (partFrame.theForm):?     NewtInstallScript(partFrame.theForm);     RemoveScript := func(partFrame) (partFrame.removeFrame):?     NewtRemoveScript(partFrame.removeFrame);// End of text file Install & Remove.f